"""
Pipeline to evaluate correction.
Formats original reads and reference files, corrects them with specificed
correction tool and evaluate the correction process.
Pipeline's details:
 - Cleanup files if necessary / specified
 - Create specific output directory
 - Format reference file for easier use
 - Format reads file for easier use
 - Corrects reads
 - Align original reads with bowtie (necessary for evaluation)
 - Evaluate corrected reads (using another pipeline implemented in c++)
"""

from ..settings import *
from . import file_manipulation as fm
from .. import binaries
import os


def evaluation_pipeline(settings):

    # In evaluation mode, the pipeline doesn't perform correction
    if not settings[GENERAL][EVALUATION]:

        # Cleanup files generated by the pipeline if necessary (several modes)
        fm.cleanup_files(settings)

        # Creates output directory if not already created
        fm.create_output_directory(settings)

        # Formats reference file for easier use
        fm.format_reference_file(settings)

        # Formats reads file for easier use
        fm.format_reads_file(settings)

        # Corrects reads file after checking if a corrected file already exists
        if not os.path.isfile(settings[GENERAL][OUTPUT_PATH] +
                              settings[GENERAL][CORRECTED_FILE]):
            if settings[GENERAL][CORRECTION] == 'musket':
                binaries.musket(settings)
            elif settings[GENERAL][CORRECTION] == 'bloocoo':
                binaries.bloocoo(settings)
            elif settings[GENERAL][CORRECTION] == 'bcalm':
                binaries.dbg_correction(settings)

        # Generates an index from the reference for alignemnt with bowtie
        binaries.bowtie_index(settings)

        # Aligns reads on reference using bowtie
        binaries.bowtie(settings)

    # Evaluates correction results with the evaluation pipeline
    binaries.evaluation(settings)
